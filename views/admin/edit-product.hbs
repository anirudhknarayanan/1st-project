<!-- Add this inside your <head> or before </body> -->


<style>
    /* General card layout */
    .card {
        border-radius: 16px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);
        border: none;
        overflow: hidden;
    }

    .card-header h4 {
        font-size: 1.2rem;
        font-weight: 600;
        color: #444;
        margin-bottom: 0;
    }

    /* Label and input styling */
    #flexy {
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    label.form-label {
        font-weight: 600;
        font-size: 0.95rem;
        color: #333;
    }

    input.form-control,
    textarea.form-control,
    select.form-select {
        padding: 12px 14px;
        border-radius: 12px;
        border: 1px solid #ddd;
        background-color: #f9f9f9;
        transition: all 0.3s ease;
        font-size: 0.95rem;
    }

    input.form-control:focus,
    textarea.form-control:focus,
    select.form-select:focus {
        border-color: #3f51b5;
        background-color: #fff;
        box-shadow: 0 0 0 4px rgba(63, 81, 181, 0.15);
    }

    .error-message {
        color: #e74c3c;
        font-size: 0.8rem;
        margin-top: 2px;
    }

    /* Image thumbnail grid */
    .thumbnails-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        padding-top: 10px;
    }

    .existing-image-container {
        position: relative;
        width: 120px;
        height: 120px;
        border-radius: 12px;
        overflow: hidden;
        border: 1px solid #ddd;
        background: #fff;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.07);
    }

    .existing-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .delete-image-btn {
        position: absolute;
        top: 6px;
        right: 6px;
        background: rgba(231, 76, 60, 0.9);
        color: white;
        border: none;
        font-size: 0.75rem;
        padding: 5px 8px;
        border-radius: 8px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .delete-image-btn:hover {
        background: #c0392b;
    }

    /* Upload section */
    .image-upload-container input[type="file"] {
        padding: 10px;
        border-radius: 10px;
        background: #fff;
        border: 1px dashed #aaa;
        cursor: pointer;
    }

    .image-upload-container input[type="file"]:hover {
        background: #f0f0f0;
    }

    /* Cropper Modal */
    #cropperModal {
        display: none;
        position: fixed;
        z-index: 2000;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.7);
    }

    .crop-modal-content {
        margin: 5% auto;
        background-color: #fff;
        padding: 2rem;
        border-radius: 20px;
        width: 90%;
        max-width: 500px;
        text-align: center;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
    }

    .crop-modal-content img {
        max-width: 100%;
        max-height: 300px;
        margin-bottom: 1rem;
        border-radius: 8px;
    }

    .crop-modal-buttons {
        display: flex;
        justify-content: space-between;
        gap: 12px;
    }

    /* Buttons */
    button.btn,
    .btn-submit {
        padding: 12px 20px;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(to right, #4a6cf7, #657eff);
        color: #fff;
        border: none;
    }

    .btn-primary:hover {
        background: linear-gradient(to right, #3f51b5, #5a6ded);
    }

    .btn-secondary {
        background: #ddd;
        color: #333;
    }

    .btn-secondary:hover {
        background: #ccc;
    }

    /* Submit button */
    .btn-submit {
        background: linear-gradient(to right, #3f51b5, #657eff);
        color: #fff;
        border: none;
    }

    .btn-submit:hover {
        background: linear-gradient(to right, #2c3e50, #34495e);
    }

    .custom-upload-label {
        display: inline-block;
        background-color: #007bff;
        color: white;
        padding: 8px 16px;
        font-weight: 500;
        border-radius: 5px;
        cursor: pointer;
        margin-bottom: 10px;
    }

    .custom-upload-label:hover {
        background-color: #0056b3;
    }

    .thumbnail {
        height: 100px;
        margin: 5px;
        border-radius: 6px;
    }

    .remove-image-btn {
        position: absolute;
        top: 0;
        right: 5px;
        background-color: red;
        color: white;
        border: none;
        border-radius: 50%;
        font-size: 18px;
        width: 25px;
        height: 25px;
        cursor: pointer;
    }

    #cropperModal {
        display: none;
        position: fixed;
        inset: 0;
        background-color: rgba(0, 0, 0, 0.7);
        z-index: 2000;
    }

    #cropperModal.show {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .crop-modal-content {
        background-color: #fff;
        padding: 2rem;
        border-radius: 20px;
        width: 90%;
        max-width: 500px;
        text-align: center;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
    }

    .crop-modal-content img {
        max-width: 100%;
        max-height: 300px;
        margin-bottom: 1rem;
        border-radius: 8px;
    }

    .crop-modal-buttons {
        display: flex;
        justify-content: space-between;
        gap: 12px;
    }
</style>


<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
            <div class="col-lg-8 mx-auto">
                <div class="card mb-4">
                    <div class="card-body">
                        {{#if product}}
                        <form method="POST" action="/admin/products/editProduct/{{product._id}}" enctype="multipart/form-data"
                            onsubmit="return validateForm(event)">
                            <div class="mb-4" id="flexy">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName" class="form-control"
                                    id="product_name" value="{{product.productName}}">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="mb-4" id="flexy">
                                <label for="description" class="form-label">Description</label>
                                <textarea placeholder="Type here" name="description" class="form-control"
                                    id="description" rows="4">{{product.description}}</textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <div class="row">
                                <div class="col-lg-6 mb-4" id="flexy">
                                    <label for="category" class="form-label">Category</label>
                                    <select name="category" class="form-select" id="category">
                                        {{#each category}}
                                        <option value="{{this._id}}" {{#ifCond this._id '=='
                                            ../product.category._id}}selected{{/ifCond}}>
                                            {{this.name}}
                                        </option>
                                        {{/each}}
                                    </select>

                                    <div id="category-error" class="error-message"></div>
                                </div>

                                <div class="col-lg-6 mb-4" id="flexy">
                                    <label for="quantity" class="form-label">Quantity</label>
                                    <input type="number" placeholder="Enter quantity" name="quantity"
                                        class="form-control" id="quantity" value="{{product.quantity}}" />
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4 mb-4" id="flexy">
                                    <label for="regularPrice" class="form-label">Regular Price</label>
                                    <input type="number" placeholder="Enter regular price" name="regularPrice"
                                        class="form-control" id="regularPrice" value="{{product.regularPrice}}" />
                                </div>

                                <div class="col-lg-4 mb-4" id="flexy">
                                    <label for="salePrice" class="form-label">Sale Price</label>
                                    <input type="number" placeholder="Enter sale price" name="salePrice"
                                        class="form-control" id="salePrice" value="{{product.salePrice}}" />
                                </div>

                                <div class="col-lg-6 mb-4" id="flexy">
                                    <label for="brand" class="form-label">Brand</label>
                                    <select name="brand" class="form-select">
                                        {{#each brand}}
                                        <option value="{{this._id}}" {{#ifCond this._id '=='
                                            ../product.brand._id}}selected{{/ifCond}} {{#ifCond this._id '=='
                                            ../product.brand}}selected{{/ifCond}}>
                                            {{this.brandName}}
                                        </option>
                                        {{/each}}
                                    </select>



                                </div>
                            </div>




                            <div class="card mb-4 image-upload-section">
                                <div class="card-header">
                                    <h4>Existing Images</h4>
                                </div>
                                <div class="card-body">
                                    <div id="existingImagesContainer" class="thumbnails-container">
                                        {{#each product.productImage}}
                                        <div class="existing-image-container" id="existingImageContainer{{@index}}">
                                            <img src="/uploads/product-images/{{this}}" alt="Product Image"
                                                class="existing-image">
                                            <button type="button" class="delete-image-btn"
                                                onclick="deleteExistingImage('{{this}}', '{{../product._id}}')">Delete</button>
                                        </div>
                                        {{/each}}
                                    </div>
                                </div>
                            </div>





                            <div class="card mb-4 image-upload-section">
                                <div class="card-header">
                                    <h4>Add/Replace Images</h4>
                                </div>
                                <div class="card-body">
                                    <div class="image-upload-container">
                                        <label for="imageUpload" class="custom-upload-label">Choose Images</label>
                                        <input type="file" id="imageUpload" name="images" accept="image/*"
                                            onchange="openCropperModal(event)" style="display: none;" />
                                        <div id="addedImagesContainer" class="mt-3"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label for="isListed" class="form-label">Product Status</label>
                                <select name="isListed" class="form-select" id="isListed">
                                    <option value="true" {{#if product.isBlocked}}selected{{/if}}>block
                                    </option>
                                    <option value="false" {{#unless product.isBlocked}}selected{{/unless}}>unblock
                                    </option>
                                </select>
                            </div>

                            <div class="d-grid">
                                <button type="submit" class="btn btn-submit">Update Product</button>
                            </div>
                        </form>
                        {{else}}
                        <p>Product not found.</p>
                        {{/if}}
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


<!-- Cropper Modal -->

<div id="cropperModal">
    <div class="crop-modal-content">
        <img id="cropperImage" />
        <div class="crop-modal-buttons">
            <button class="btn btn-primary" onclick="saveCroppedImage()">Save Cropped</button>
            <button class="btn btn-secondary" onclick="closeCropperModal()">Cancel</button>
        </div>
    </div>
</div>


<script>




    // Inject product images array from server using EJS-style escape with Handlebars-compatible output
    let existingImages = {{{ json product.productImage }}}; // or {{{json product.productImages}}}
    let deletedImages = [];
    let cropper;
    let croppedImagesCount = 0;

    async function validateForm(event) {
        event.preventDefault(); // Stop default form submission

        const form = document.querySelector('form');
        const totalImages = existingImages.length - deletedImages.length + croppedImagesCount;

        // 1. Image count validation
        if (totalImages < 3 || totalImages > 4) {
            await Swal.fire({
                icon: 'error',
                title: 'Invalid Image Count',
                text: 'You must have between 3 and 4 images'
            });
            return;
        }

        // 2. Quantity validation (frontend)
        const quantityInput = document.getElementById('quantity');
        const quantity = parseInt(quantityInput?.value);
        if (isNaN(quantity) || quantity <= 0) {
            await Swal.fire({
                icon: 'error',
                title: 'Invalid Quantity',
                text: 'Quantity must be a positive number'
            });
            return;
        }

        // 3. Prepare FormData
        const formData = new FormData(form);
        formData.set('deletedImages', JSON.stringify(deletedImages));

        const fileInput = document.getElementById('imageUpload');
        if (fileInput && fileInput.files.length > 0) {
            formData.delete('images');
            for (let i = 0; i < fileInput.files.length; i++) {
                formData.append('images', fileInput.files[i]);
            }
        }

        // 4. Append cropped images
        const addedImagesContainer = document.getElementById('addedImagesContainer');
        const croppedImages = addedImagesContainer.getElementsByTagName('img');

        const dataURLtoFile = (dataUrl, filename) => {
            const arr = dataUrl.split(',');
            const mime = arr[0].match(/:(.*?);/)[1];
            const bstr = atob(arr[1]);
            const u8arr = new Uint8Array(bstr.length);
            for (let i = 0; i < bstr.length; i++) {
                u8arr[i] = bstr.charCodeAt(i);
            }
            return new File([u8arr], filename, { type: mime });
        };

        Array.from(croppedImages).forEach((img, index) => {
            const file = dataURLtoFile(img.src, `croppedImage${index + 1}.jpg`);
            formData.append(`croppedImage${index + 1}`, file);
        });

        // 5. Submit form with Fetch and show alerts
        try {
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();

            if (!response.ok || !result.success) {
                await Swal.fire({
                    icon: 'error',
                    title: 'Update Failed',
                    text: result.message || 'Something went wrong during update.'
                });
                return;
            }

            await Swal.fire({
                icon: 'success',
                title: 'Product Updated',
                text: result.message || 'Product has been updated successfully'
            });

            window.location.href = '/admin/products';
        } catch (error) {
            console.error('Fetch Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An unexpected error occurred while updating the product.'
            });
        }
    }



    function deleteExistingImage(imageId, productId) {
        Swal.fire({
            title: 'Remove Existing Image',
            text: 'Are you sure you want to remove this image?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: "/admin/products/deleteImage",
                    method: "POST",
                    data: {
                        imageNameToServer: imageId,
                        productIdToServer: productId
                    },
                    success: (response) => {
                        if (response.status === true) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Image Removed',
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 2000
                            });
                            window.location.reload();
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Failed',
                                text: response.message || 'Could not remove image'
                            });
                        }
                    },
                    error: (err) => {

                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Server error while removing image'
                        });
                    }
                });
            }
        });
    }





    function openCropperModal(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = function (e) {
            console.log("Image loaded:", e.target.result); // ✅ Debug log

            const cropperImage = document.getElementById('cropperImage');
            cropperImage.src = e.target.result;

            try {
                if (cropper) cropper.destroy();

                cropper = new Cropper(cropperImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                });
            } catch (err) {
                console.error("Cropper init error:", err); // ✅ Catch cropper issues
            }

            document.getElementById('cropperModal').classList.add('show');
        };

        reader.readAsDataURL(file);
    }

    function saveCroppedImage() {
        console.log("clicked")
        if (!cropper) return;

        const totalImages = existingImages.length - deletedImages.length + croppedImagesCount;

        if (totalImages >= 3) {
            Swal.fire({
                icon: 'error',
                title: 'Image Limit',
                text: 'Maximum 4 images allowed',
                confirmButtonColor: '#3085d6',
            });
            closeCropperModal();
            return;
        }

        const canvas = cropper.getCroppedCanvas();
        const dataUrl = canvas.toDataURL('image/jpeg');

        // Create thumbnail container
        const container = document.createElement('div');
        container.style.position = 'relative';

        // Create thumbnail image
        const img = document.createElement('img');
        img.src = dataUrl;
        img.classList.add('thumbnail');

        // Create remove button
        const removeBtn = document.createElement('button');
        removeBtn.innerHTML = '&times;';
        removeBtn.classList.add('remove-image-btn');
        removeBtn.onclick = () => removeCroppedImage(container);

        container.appendChild(img);
        container.appendChild(removeBtn);

        document.getElementById('addedImagesContainer').appendChild(container);

        // Create hidden input for the cropped image
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = `croppedImage${croppedImagesCount + 1}`;
        hiddenInput.value = dataUrl;

        document.querySelector('form').appendChild(hiddenInput);

        croppedImagesCount++;
        document.getElementById('imageUpload').value = '';
        closeCropperModal();
    }

    function removeCroppedImage(container) {
        Swal.fire({
            title: 'Remove Image',
            text: 'Are you sure you want to remove this image?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!',
        }).then((result) => {
            if (result.isConfirmed) {
                container.remove();
                croppedImagesCount--;

                Swal.fire({
                    icon: 'success',
                    title: 'Removed',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 2000,
                });
            }
        });
    }

    function closeCropperModal() {
        document.getElementById('cropperModal').classList.remove('show');
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        document.getElementById('imageUpload').value = '';
    }
</script>