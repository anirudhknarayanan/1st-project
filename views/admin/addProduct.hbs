<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
    /* Professional Product Add Page Styling */

    .content-main {

        margin-left: 20px;
        margin-right: 20px;
        transition: all 0.3s ease;
    }

    @media (max-width: 992px) {
        .content-main {
            margin-left: 20px;
            margin-right: 20px;
        }
    }

    .content-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 15px;
        border-bottom: 2px solid #e9ecef;
    }

    .content-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
    }

    .card {
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);
        border: none;
        transition: all 0.3s ease;
    }

    .card:hover {
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        transform: translateY(-5px);
    }

    .card-body {
        padding: 30px;
    }

    /* Form Styling */
    .form-label {
        font-weight: 600;
        color: #34495e;
        margin-bottom: 10px;
        transition: color 0.3s ease;
    }

    .form-control,
    .form-select {
        border: 1px solid #d1d8e0;
        border-radius: 8px;
        padding: 12px 15px;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        background-color: #f9fbfc;
    }

    .form-control:focus,
    .form-select:focus {
        border-color: #3498db;
        box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.15);
        background-color: white;
    }

    /* Error Message Styling */
    .error-message {
        color: #e74c3c;
        font-size: 0.85rem;
        margin-top: 5px;
        animation: fadeIn 0.3s ease;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* File Input Styling */
    .form-control[type="file"] {
        padding: 8px 12px;
        border: 2px dashed #e0e4e8;
        background-color: #f9fbfc;
    }

    .form-control[type="file"]:hover {
        border-color: #3498db;
    }

    /* Button Styling */
    .btn {
        background: linear-gradient(to right, #FFD700, #FF8C00);
        color: white;
        border: none;
        padding: 12px 25px;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 8px;
        letter-spacing: 0.5px;
        transition: all 0.3sease;
        text-transform: uppercase;
        margin-left: 411px;
        margin-top: 35px;
        width: 193px;
        height: 53px;
    }

    .btn:hover {
        background: linear-gradient(to right, #FFC300, #FF5733);
        transform: translateY(-3px);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    }

    /* Thumbnails Container */
    .thumbnails-container {
        display: flex;
        gap: 15px;
        overflow-x: auto;
        padding-bottom: 10px;
        scrollbar-width: thin;
        scrollbar-color: #3498db #e0e4e8;
    }

    .thumbnails-container::-webkit-scrollbar {
        height: 8px;
    }

    .thumbnails-container::-webkit-scrollbar-track {
        background: #e0e4e8;
        border-radius: 10px;
    }

    .thumbnails-container::-webkit-scrollbar-thumb {
        background-color: #3498db;
        border-radius: 10px;
    }

    .thumbnail {
        width: 120px;
        height: 120px;
        object-fit: cover;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .thumbnail:hover {
        transform: scale(1.05);
    }

    /* Responsive Adjustments */
    @media (max-width: 768px) {
        .content-main {
            margin: 15px;
        }

        .card-body {
            padding: 20px;
        }

        .btn {
            width: 100%;
        }
    }

    .image-upload-section {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        margin-top: 20px;
    }

    .image-upload-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .image-upload-row {
        display: flex;
        flex-direction: column;
        gap: 15px;
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .file-input-wrapper {
        display: flex;
        align-items: center;
        gap: 15px;
        width: 100%;
    }

    .image-preview {
        width: 200px;
        height: 200px;
        object-fit: cover;
        border-radius: 8px;
        border: 2px dashed #e0e4e8;
    }

    .image-cropper {
        display: none;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        margin-top: 15px;
    }

    .image-cropper img {
        max-width: 500px;
        max-height: 500px;
        border-radius: 8px;
        object-fit: cover;
    }

    .save-button {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 8px 20px;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .save-button:hover {
        background-color: #2980b9;
        transform: translateY(-2px);
    }

    /* Thumbnails styling */
    .thumbnails-container {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        margin-bottom: 20px;
    }

    .thumbnail-wrapper {
        position: relative;
        width: 100px;
        height: 100px;
    }

    .thumbnail {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 8px;
        border: 2px solid #e0e4e8;
    }

    .remove-thumbnail {
        position: absolute;
        top: -8px;
        right: -8px;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        background-color: #e74c3c;
        color: white;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 16px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .remove-thumbnail:hover {
        background-color: #c0392b;
    }

    #flexy {
        display: flex;
        flex-direction: column;
    }
</style>

<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-8 mx-auto">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="POST" action="/admin/products/addProduct" enctype="multipart/form-data" id="addProductForm">


                        <div class="mb-4" id="flexy">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" class="form-control"
                                id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <div class="mb-4" id="flexy">
                            <label class="form-label">Full Description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control"
                                rows="4"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <div class="row">
                            <div class="col-lg-4 mb-4" id="flexy">
                                <label class="form-label">Regular Price</label>
                                <input placeholder="regularPrice" name="regularPrice" type="text" class="form-control">
                                <div id="regularPrice-error" class="error-message"></div>
                            </div>

                            <div class="col-lg-4 mb-4" id="flexy">
                                <label class="form-label">Sale Price</label>
                                <input placeholder="salePrice" name="salePrice" type="text" class="form-control">
                                <div id="salePrice-error" class="error-message"></div>
                            </div>

                            <div class="col-lg-4 mb-4" id="flexy">
                                <label class="form-label">Quantity</label>
                                <input placeholder="quantity" name="quantity" type="text" class="form-control">
                                <div id="quantity-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-4 mb-4" id="flexy">
                                <label class="form-label">Category</label>
                                <select class="form-select" name="category">
                                    <option value="" disabled selected>Select a category</option>
                                    {{#each category}}
                                    <option value="{{this._id}}">{{this.name}}</option>
                                    {{/each}}
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>

                            <div class="col-lg-4 mb-4" id="flexy">
                                <label class="form-label">Brand</label>
                                <select class="form-select" name="brand">
                                    <option value="" disabled selected>Select a brand</option>
                                    {{#each brand}}
                                    <option value="{{this._id}}">{{this.brandName}}</option>
                                    {{/each}}
                                </select>

                                <div id="brand-error" class="error-message"></div>
                            </div>
                        </div>

                        <div class="card mb-4 image-upload-section">
                            <div class="card-header">
                                <h4>Choose Images</h4>
                            </div>
                            <div class="card-body">
                                <div class="border row mb-3">
                                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                                </div>

                                <div class="image-upload-container">
                                    {{!-- First image --}}
                                    <div class="image-upload-row">
                                        <div class="file-input-wrapper">
                                            <img src="" alt="Image Preview" id="imgView1" class="image-preview">
                                            <input class="form-control file-input" type="file" name="images" id="input1"
                                                accept="image/png, image/jpeg, image/jpg, image/webp, image/avif"
                                                onchange="viewImage1(event), viewImage(event, 1)">
                                        </div>
                                        <div class="image-cropper" style="display:none;">
                                            <img src="" id="croppedImg1" alt="Cropped Image">
                                            <button type="button" id="saveButton1"
                                                class="btn-sm save-button">Save</button>
                                        </div>
                                        <div id="images-error" class="error-message"></div>
                                    </div>

                                    {{!-- Second image --}}
                                    <div class="image-upload-row">
                                        <div class="file-input-wrapper">
                                            <img src="" alt="Image Preview" id="imgView2" class="image-preview">
                                            <input class="form-control file-input" type="file" name="images" id="input2"
                                                accept="image/png, image/jpeg, image/jpg, image/webp, image/avif"
                                                onchange="viewImage2(event), viewImage(event, 2)">
                                        </div>
                                        <div class="image-cropper" style="display:none;">
                                            <img src="" id="croppedImg2" alt="Cropped Image">
                                            <button type="button" id="saveButton2"
                                                class="btn-sm save-button">Save</button>
                                        </div>
                                    </div>

                                    {{!-- Third image --}}
                                    <div class="image-upload-row">
                                        <div class="file-input-wrapper">
                                            <img src="" alt="Image Preview" id="imgView3" class="image-preview">
                                            <input class="form-control file-input" type="file" name="images" id="input3"
                                                accept="image/png, image/jpeg, image/jpg, image/webp, image/avif"
                                                onchange="viewImage3(event), viewImage(event, 3)">
                                        </div>
                                        <div class="image-cropper" style="display:none;">
                                            <img src="" id="croppedImg3" alt="Cropped Image">
                                            <button type="button" id="saveButton3"
                                                class="btn-sm save-button">Save</button>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>

                        <div>
                            <button class="btn btn-md rounded font-sm hover-up" onclick="return validateAndSubmit()"
                                type="submit">
                                Publish
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        {{#if message}}
        <p class="text-danger">{{message}}</p>
        {{/if}}

    </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.js"
    integrity="sha512-lR8d1BXfYQuiqoM/LeGFVtxFyspzWFTZNyYIiE5O2CcAGtTCRRUMLloxATRuLz8EmR2fYqdXYlrGh+D6TVGp3g=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        if (typeof Cropper === 'undefined') {
            console.error('Cropper library is not loaded');
            const errorMsg = document.createElement('div');
            errorMsg.className = 'alert alert-danger';
            errorMsg.textContent = 'Error: Cropper.js library could not be loaded. Please check your internet connection.';
            document.querySelector('.content-header')?.after(errorMsg);
        }

        let croppers = {};

        function validateForm() {
            let isValid = true;
            const requiredFields = ['productName', 'description', 'regularPrice', 'category', 'salePrice', 'quantity'];

            requiredFields.forEach(field => {
                const input = document.querySelector(`[name="${field}"]`);
                const errorEl = document.getElementById(`${field}-error`);
                if (!input || !input.value.trim()) {
                    errorEl && (errorEl.textContent = `${field.replace(/([A-Z])/g, ' $1').replace(/^./, s => s.toUpperCase())} is required`);
                    isValid = false;
                } else {
                    errorEl && (errorEl.textContent = '');
                }
            });

            const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
            const imageCount = [...imageInputs].filter(input => input.files && input.files[0]).length;

            const imageErrorEl = document.getElementById('images-error');
            if (imageCount < 3) {
                imageErrorEl && (imageErrorEl.textContent = 'At least 3 images are required');
                isValid = false;
            } else {
                imageErrorEl && (imageErrorEl.textContent = '');
            }

            return isValid;
        }

        function validateAndSubmit() {
            if (validateForm()) {
                Swal.fire({
                    title: 'Add Product',
                    text: 'Are you sure you want to add this product?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, add it!'
                }).then(async result => {
                    if (result.isConfirmed) {
                        const form = document.getElementById('addProductForm');
                        const formData = new FormData(form);

                        try {
                            const response = await fetch(form.action, {
                                method: 'POST',
                                body: formData
                            });

                            const result = await response.json();

                            if (response.ok && result.success) {
                                await Swal.fire({
                                    icon: 'success',
                                    title: 'Product Added',
                                    text: result.message || 'Product has been added successfully',
                                    toast: true,
                                    position: 'top-end',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                                window.location.href = '/admin/products';
                            } else {
                                await Swal.fire({
                                    icon: 'error',
                                    title: 'Failed to Add',
                                    text: result.message || 'Something went wrong!'
                                });
                            }
                        } catch (err) {
                            console.error('Fetch error:', err);
                            await Swal.fire({
                                icon: 'error',
                                title: 'Server Error',
                                text: 'An unexpected error occurred. Please try again.'
                            });
                        }
                    }
                });
            }
            return false;
        }

        function viewImage(event, index) {
            const input = event.target;
            if (!input.files || !input.files[0]) return;

            const reader = new FileReader();
            const imgView = document.getElementById(`imgView${index}`);
            const cropperContainer = document.querySelector(`#input${index}`).closest('.image-upload-row');
            const croppedContainer = cropperContainer.querySelector('.image-cropper');
            const croppedImg = document.getElementById(`croppedImg${index}`);

            reader.onload = function () {
                imgView.onload = function () {
                    if (croppers[index]) {
                        croppers[index].destroy();
                    }

                    try {
                        croppers[index] = new Cropper(imgView, {
                            aspectRatio: NaN,
                            viewMode: 1,
                            background: false,
                            autoCropArea: 1, // Full-size crop area
                            cropBoxResizable: true,
                            dragMode: 'move',
                            ready: () => {
                                croppedContainer.style.display = 'flex';
                            }
                        });

                        document.getElementById(`saveButton${index}`).onclick = function () {
                            const cropper = croppers[index];
                            if (!cropper) return;

                            const cropData = cropper.getData(true);
                            const naturalWidth = imgView.naturalWidth;
                            const displayWidth = imgView.width;
                            const scale = naturalWidth / displayWidth;

                            const canvas = cropper.getCroppedCanvas({
                                width: cropData.width * scale,
                                height: cropData.height * scale,
                                imageSmoothingEnabled: true,
                                imageSmoothingQuality: 'high'
                            });

                            canvas.toBlob(blob => {
                                const timestamp = new Date().getTime();
                                const file = new File([blob], `cropped-img-${timestamp}-${index}.jpeg`, { type: 'image/jpeg' });

                                const dt = new DataTransfer();
                                dt.items.add(file);
                                document.getElementById(`input${index}`).files = dt.files;

                                croppedImg.src = canvas.toDataURL('image/jpeg');
                                imgView.style.display = 'none';
                                croppedImg.style.display = 'block';

                                cropper.destroy();
                                croppers[index] = null;

                                updateThumbnails();
                            }, 'image/jpeg', 0.9);
                        };

                    } catch (error) {
                        console.error('Cropper init error:', error);
                        alert('Image cropper error. Refresh and try again.');
                    }
                };

                imgView.src = reader.result; // triggers imgView.onload
            };

            reader.readAsDataURL(input.files[0]);
        }

        function updateThumbnails() {
            const container = document.getElementById('addedImagesContainer');
            container.innerHTML = '';

            const inputs = document.querySelectorAll('input[type="file"][name="images"]');
            inputs.forEach((input, index) => {
                if (input.files && input.files[0]) {
                    const thumb = document.createElement('div');
                    thumb.className = 'thumbnail-wrapper';

                    const img = document.createElement('img');
                    img.className = 'thumbnail';
                    img.src = URL.createObjectURL(input.files[0]);

                    const btn = document.createElement('button');
                    btn.className = 'remove-thumbnail';
                    btn.innerHTML = '×';
                    btn.type = 'button';
                    btn.onclick = function () {
                        input.value = '';
                        const croppedImg = document.getElementById(`croppedImg${index + 1}`);
                        const imgView = document.getElementById(`imgView${index + 1}`);
                        if (croppedImg) croppedImg.src = '';
                        if (imgView) {
                            imgView.src = '';
                            imgView.style.display = 'block';
                        }
                        thumb.remove();
                    };

                    thumb.appendChild(img);
                    thumb.appendChild(btn);
                    container.appendChild(thumb);
                }
            });
        }

        const form = document.getElementById('addProductForm');
        if (form) {
            form.onsubmit = function (e) {
                e.preventDefault();
                return validateAndSubmit();
            };
        }

        // Expose to global for inline usage
        window.validateForm = validateForm;
        window.validateAndSubmit = validateAndSubmit;
        window.viewImage = viewImage;
        window.updateThumbnails = updateThumbnails;

        // Optional individual preview (if still used)
        window.viewImage1 = e => document.getElementById('imgView1').src = URL.createObjectURL(e.target.files[0]);
        window.viewImage2 = e => document.getElementById('imgView2').src = URL.createObjectURL(e.target.files[0]);
        window.viewImage3 = e => document.getElementById('imgView3').src = URL.createObjectURL(e.target.files[0]);
    });
</script>