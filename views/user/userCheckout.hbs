<style>
  /* Modal Background */
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: flex-start;
    padding: 20px;
    overflow-y: auto;
  }

  /* Modal Content */
  .modal-content {
    background: #fff;
    width: 100%;
    max-width: 500px;
    margin: 40px auto;
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    position: relative;
  }

  /* Close Button */
  .close-btn {
    position: absolute;
    right: 20px;
    top: 15px;
    font-size: 24px;
    font-weight: bold;
    cursor: pointer;
    color: #666;
    transition: color 0.3s;
  }

  .close-btn:hover {
    color: #000;
  }

  /* Form Title */
  .modal-title {
    font-size: 1.5rem;
    color: #333;
    margin-bottom: 25px;
    padding-bottom: 15px;
    border-bottom: 1px solid #eee;
  }

  /* Form Group */
  .form-group {
    margin-bottom: 20px;
  }

  /* Input Fields */
  .modal-content input {
    width: 100%;
    padding: 12px;
    margin: 8px 0;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 14px;
    transition: border-color 0.3s;
  }

  .modal-content input:focus {
    outline: none;
    border-color: #4A90E2;
    box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.1);
  }

  .modal-content input::placeholder {
    color: #999;
  }

  /* Save Button */
  .save-btn {
    width: 100%;
    padding: 12px;
    background: #4A90E2;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s;
    margin-top: 10px;
  }

  .save-btn:hover {
    background: #357ABD;
  }

  .save-btn:active {
    transform: translateY(1px);
  }

  /* Modal Background */
  .addModal {
    display: none;
    position: fixed;
    z-index: 1000;
    /* Ensures the modal is above other content */
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    /* Semi-transparent black background */
    justify-content: center;
    align-items: center;
    /* Centers the modal vertically and horizontally */
    padding: 20px;
    overflow-y: auto;
  }

  /* Modal Content */
  .addModal .modal-content {
    background: #fff;
    width: 100%;
    max-width: 500px;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    position: relative;
    animation: fadeIn 0.3s ease-in-out;
  }

  /* Close Button */
  .addModal .close-btn {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 24px;
    cursor: pointer;
    color: #333;
  }

  .addModal .close-btn:hover {
    color: #000;
  }

  /* Modal Title */
  .addModal .modal-title {
    text-align: center;
    font-size: 22px;
    margin-bottom: 20px;
    font-weight: bold;
    color: #333;
  }

  /* Form Group */
  .addModal .form-group {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  /* Input Fields */
  .addModal .form-group input {
    width: 100%;
    padding: 10px;
    margin-top: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    transition: border-color 0.3s ease-in-out;
  }

  .addModal .form-group input:focus {
    border-color: #007bff;
    outline: none;
  }

  /* Save Button */
  .addModal .save-btn {
    width: 100%;
    background: #007bff;
    color: #fff;
    padding: 12px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    margin-top: 15px;
    cursor: pointer;
    transition: background 0.3s ease-in-out;
  }

  .addModal .save-btn:hover {
    background: #0056b3;
  }

  .addModal .save-btn:active {
    transform: translateY(1px);
  }

  /* Fade-in Animation */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: scale(0.9);
    }

    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Responsive Design */
  @media (max-width: 600px) {
    .addModal .modal-content {
      width: 95%;
      padding: 15px;
    }

    .addModal .modal-title {
      font-size: 18px;
    }

    .addModal .form-group input {
      font-size: 14px;
      padding: 8px;
    }

    .addModal .save-btn {
      font-size: 14px;
      padding: 10px;
    }

  }

  /* Fix header and body overflow */
  body {
    overflow-x: hidden;
    width: 100%;
    position: relative;
  }

  .header {
    width: 100%;
    overflow: visible;
    position: relative;
    z-index: 1000;
  }

  .header__top {
    padding: 10px 0;
  }

  .header__menu {
    padding: 10px 0;
  }

  .header__menu ul {
    margin: 0;
    padding: 15px 154px;
    display: flex;
    justify-content: space-between;
    flex-direction: row;
    row-gap: 10px;
    flex-wrap: wrap;
    text-decoration: none;

  }

  .header__menu ul li {
    margin-right: 15px;
  }

  /* Fix container overflow */
  .container {
    max-width: 100%;
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
  }

  @media (min-width: 1200px) {
    .container {
      max-width: 1140px;
    }
  }

  /* Fix checkout page specific issues */
  .checkout__form {
    padding: 20px 0;
    overflow: hidden;
  }

  .shipping-address-section,
  .additional-info,
  .checkout__order {
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
    overflow: hidden;
  }

  /* Fix table overflow */
  .table-responsive {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }

  /* Fix footer */
  .footer {
    width: 100%;
    overflow: hidden;
    position: relative;
  }

  /* Fix modal */
  .modal {
    overflow-y: auto;
  }

  .modal-content {
    max-height: 90vh;
    overflow-y: auto;
  }

  /* Responsive fixes */
  @media (max-width: 768px) {
    .header__menu {
      padding: 5px 0;
    }

    .header__menu ul li {
      margin-right: 10px;
    }

    .checkout__form {
      padding: 10px 0;
    }

    .shipping-address-section,
    .additional-info,
    .checkout__order {
      margin-bottom: 15px;
    }
  }

  .coupon-wrapper {
    perspective: 1000px;
  }

  .coupon-container {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    border-radius: 15px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    overflow: hidden;
  }

  .coupon-container:hover {
    transform: scale(1.03);
    /* Simple scale instead of 3D rotation */
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
  }

  .coupon-content {
    padding: 20px;
    position: relative;
  }

  .coupon-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    border-bottom: 2px dashed #d1d8e0;
    padding-bottom: 15px;
  }

  .coupon-code {
    display: flex;
    flex-direction: column;
  }

  .code-text {
    font-size: 1.5rem;
    font-weight: 700;
    color: #2c3e50;
    letter-spacing: 2px;
  }

  .code-description {
    font-size: 0.8rem;
    color: #7f8c8d;
  }

  .coupon-discount {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: linear-gradient(45deg, #ffa500, #ffd700);
    color: white;
    padding: 10px;
    border-radius: 10px;
    width: 70px;
  }

  .btn-apply-coupon {
    background-color: #000000;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    margin-top: 10px;
    transition: all 0.3s ease;
  }

  .btn-apply-coupon:hover {
    background-color: #252424;
    transform: translateY(-3px);
  }

  /* Additional hover effect for the entire coupon container */
  .coupon-container {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .coupon-container:hover {
    transform: scale(1.03);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
  }

  .site-btn {
    background-color: #000000;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    margin-top: 10px;
    transition: all 0.3s ease;
  }

  .site-btn:hover {
    background-color: #252424;
    transform: translateY(-3px);
  }




  #removeCouponSection {
    border-top: 1px dashed #dee2e6;
    padding-top: 10px;
    margin-top: 10px;
  }

  #appliedCouponText {
    font-size: 0.9em;
    color: #28a745;
  }

  #removeCouponBtn {
    transition: all 0.3s ease;
  }

  #removeCouponBtn:hover {
    background-color: #dc3545;
    transform: translateY(-1px);
  }

  .product-image {
    width: 50px;
    height: 50px;
    object-fit: cover;

  }
</style>

<section class="checkout py-5 bg-light">
  <div class="container">
    <div class="checkout__form">
      <form action="/checkout" method="POST">
        <div class="row">
          <!-- Left Section: Address + Notes -->
          <div class="col-lg-7 col-md-6">
            <div class="shipping-address-section p-4 bg-light rounded mb-4" style="min-height: 800px;">
              <h6 class="checkout__title mb-4">
                <i class="fas fa-shipping-fast me-2"></i>Shipping Address
              </h6>

              <div class="saved-addresses mb-4">
                {{#if userAddress.length}}
                {{#each userAddress}}
                <div class="saved-address-item mb-4 p-4 border rounded bg-white">
                  <div class="form-check">
                    <input class="form-check-input" type="radio" name="shipping_address" id="address_{{this._id}}"
                      value="{{this._id}}" {{#if @first}}checked{{/if}}>
                    <label class="form-check-label w-100" for="address_{{this._id}}">
                      <div class="d-flex justify-content-between align-items-start">
                        <div>
                          <strong class="d-block mb-2">
                            <i class="fas fa-map-marker-alt me-2"></i>
                            {{this.addressType}} Address
                          </strong>
                          <div class="address-details ms-4">
                            <p class="mb-2 text-dark">{{this.name}}</p>
                            <p class="mb-2 text-muted">
                              Landmark: {{this.landMark}}<br>
                              Pincode: {{this.pincode}}
                            </p>
                            <p class="mb-2 text-dark">{{this.city}}, {{this.state}}</p>
                            <p class="mb-1">
                              <i class="fas fa-phone-alt me-2"></i>
                              <span class="text-dark">{{this.phone}}</span>
                            </p>
                            {{#if this.altPhone}}
                            <p class="mb-0">
                              <i class="fas fa-phone me-2"></i>
                              <span class="text-muted">{{this.altPhone}}</span>
                            </p>
                            {{/if}}
                          </div>
                        </div>
                        <button type="button" class="btn btn-outline-dark"
                          onclick="openEditAddressModal('{{this._id}}')">
                          <i class="fas fa-edit me-2"></i>Edit
                        </button>
                      </div>
                    </label>
                  </div>
                </div>
                {{/each}}
                {{else}}
                <div class="text-center py-4">
                  <p class="mb-3">You haven't added any addresses yet.</p>
                  <button type="button" onclick="openAddAddressModal()" class="btn btn-dark d-block w-100">
                    <i class="fas fa-plus-circle me-2"></i>Add Another Address
                  </button>
                </div>
                {{/if}}
              </div>

              {{#if userAddress.length}}
              <button type="button" onclick="openAddAddressModal()" class="btn btn-dark d-block w-100">
                <i class="fas fa-plus-circle me-2"></i>Add Another Address
              </button>
              {{/if}}
            </div>


            <!-- Additional Info -->
            <div class="additional-info p-4 border rounded bg-white">
              <h6 class="checkout__title mb-4">
                <i class="fas fa-info-circle me-2"></i>Additional Information
              </h6>
              <div class="checkout__input">
                <p>Order Notes (Optional)</p>
                <input type="text" class="w-100 p-3" rows="4"
                  style="resize: none; border: 1px solid #e1e1e1; border-radius: 4px;"
                  placeholder="Special notes for delivery (e.g., delivery timing, specific instructions for delivery)">
                </input>
              </div>
            </div>
          </div>

          <!-- Right Section: Order Summary -->
          <div class="col-lg-5 col-md-6">
            <div class="checkout__order p-4 bg-white rounded" style="min-height: 800px;">
              <h4 class="mb-4"><i class="fas fa-shopping-cart me-2"></i>Your Order</h4>

              <!-- Cart Products -->
              <div class="table-responsive mb-4">
                <table class="table">
                  <thead>
                    <tr>
                      <th>Product</th>
                      <th class="text-end">Price</th>
                      <th class="text-center">Qty</th>
                      <th class="text-end">Total</th>
                    </tr>
                  </thead>
                  <tbody>
                    {{#each cart.items}}
                    <tr>
                      <td>
                        <img src="/uploads/product-images/{{this.productId.productImage.[0]}}" alt="Product" width="50"
                          class="me-2">
                        <div>
                          <div>{{this.productId.productName}}</div>

                          {{!-- ✅ SHOW ORIGINAL PRICE AND AMOUNT SAVED --}}
                          {{#if hasOffer}}
                          <div style="margin-top: 4px;">
                            <small class="text-muted">
                              Original: <span style="text-decoration: line-through;">₹{{this.productId.regularPrice}}</span>
                            </small>
                          </div>
                          <div class="offer-info" style="margin-top: 4px; padding: 4px 6px; background: #f8f9fa; border-left: 3px solid #28a745; border-radius: 3px;">
                            {{#if (eq appliedOfferType 'product')}}
                              <small style="color: #28a745; font-weight: bold; font-size: 11px;">
                                🏷️ <strong>Product Offer</strong>
                              </small>
                              <div style="color: #666; font-size: 10px; margin-top: 1px;">
                                You saved <strong>₹{{totalSaved}}</strong> ({{appliedOffer}}% off)
                              </div>
                            {{else if (eq appliedOfferType 'category')}}
                              <small style="color: #17a2b8; font-weight: bold; font-size: 11px;">
                                📂 <strong>Category Offer</strong>
                              </small>
                              <div style="color: #666; font-size: 10px; margin-top: 1px;">
                                You saved <strong>₹{{totalSaved}}</strong> ({{appliedOffer}}% off)
                              </div>
                            {{/if}}
                          </div>
                          {{else}}
                          <small style="color: #999; font-size: 10px; margin-top: 3px; display: block;">
                            No offers applied
                          </small>
                          {{/if}}
                        </div>
                      </td>
                      <td class="text-end">₹{{this.totalPrice}}</td>
                      <td class="text-center">x{{this.quantity}}</td>
                      <td class="text-end">₹{{multiply this.quantity this.totalPrice}}</td>
                    </tr>
                    {{/each}}
                  </tbody>
                </table>
              </div>

              <!-- Coupon Code Input -->
              <div class="p-3 border rounded bg-light mb-4">
                <h6 class="mb-3"><i class="fas fa-tag me-2"></i>Have a Coupon?</h6>
                <div class="input-group">
                  <input type="text" name="coupon_code" class="form-control" id="couponCode"
                    placeholder="Enter Coupon Code">
                  <button type="button" class="btn btn-dark" id="applyCoupon" onclick="applyCoupons()">Apply</button>

                </div>
              </div>

              <!-- Available Coupons -->
              {{#if coupon.length}}
              <div class="mb-4">
                <h6 class="mb-3"><i class="fas fa-tag me-2"></i>Available Coupons</h6>
                {{#each coupon}}
                <div class="p-3 border rounded bg-white mb-3">
                  <div class="d-flex justify-content-between">
                    <span class="fw-bold" data-coupon-id="{{this.couponCode}}">{{this.couponCode}}</span>
                    <span class="text-success">{{this.couponDiscount}}% OFF</span>
                  </div>
                  <p class="mb-1">Min Purchase: ₹{{this.couponMinAmount}}</p>
                  <p class="mb-1">Valid Until: {{formatDate this.couponValidity}}</p>
                  <button type="button" class="btn btn-outline-primary btn-sm mt-2"
                    onclick="copyCoupon('{{this.couponCode}}')">Copy Code</button>
                  <small id="copy-message-{{this.couponCode}}" style="display: none; color: green;">Copied!</small>
                </div>
                {{/each}}
              </div>
              {{/if}}

              <!-- Referral Coupons -->
              {{#if referralCoupons.length}}
              <div class="mb-4">
                <h6 class="mb-3"><i class="fas fa-gift me-2"></i>Your Referral Rewards</h6>
                {{#each referralCoupons}}
                <div class="p-3 border rounded mb-3" style="background: linear-gradient(135deg, #28a745, #20c997); color: white;">
                  <div class="d-flex justify-content-between align-items-center">
                    <div>
                      <span class="fw-bold" data-coupon-id="{{this.couponCode}}">{{this.couponCode}}</span>
                      <span class="badge bg-light text-dark ms-2">₹{{this.discount}} OFF</span>
                    </div>
                    <i class="fas fa-star text-warning"></i>
                  </div>
                  <p class="mb-1 small">🎉 Referral Reward - You referred someone!</p>
                  <p class="mb-1 small">Valid for any purchase</p>
                  <button type="button" class="btn btn-light btn-sm mt-2"
                    onclick="copyCoupon('{{this.couponCode}}')">Copy Code</button>
                  <small id="copy-message-{{this.couponCode}}" style="display: none; color: #fff;">Copied!</small>
                </div>
                {{/each}}
              </div>
              {{/if}}

              <!-- Order Summary -->
              <div class="order-summary p-3 bg-white rounded border mb-4">
                <h6 class="mb-3">
                  <i class="fas fa-calculator me-2"></i>Order Summary
                </h6>
                <ul class="checkout__total__all">
                  <li class="d-flex justify-content-between mb-2">
                    Subtotal <span id="subtotal">₹{{cart.cartTotal}}</span>
                  </li>

                  {{#if (eq cart.totalPrice 0)}}
                  <li class="d-flex justify-content-between mb-2">
                    Shipping Charge <span id="shipping-charge">₹0</span>
                  </li>
                  {{else}}
                  <li class="d-flex justify-content-between mb-2">
                    Shipping Charge <span id="shipping-charge">₹40</span>
                  </li>
                  {{/if}}

                  <li class="d-flex justify-content-between mb-2">
                    Tax (0%) <span>₹0</span>
                  </li>

                  <li class="d-flex justify-content-between mb-2 text-success">
                    Discount <span id="discount">-₹0</span>
                  </li>


                  {{#if (eq cart.cartTotal 0)}}
                  <li class="d-flex justify-content-between total-amount" id="total-amount">
                    <strong>Total</strong> <strong id="total">₹32397</strong>
                  </li>
                  {{else}}
                  <li class="d-flex justify-content-between total-amount" id="total-amount">
                    <strong>Total</strong> <strong id="total">₹{{add cart.cartTotal 40}}</strong>
                  </li>
                  {{/if}}

                  <div id="removeCouponSection" style="display: none;" class="mt-2 text-center">
                    <small class="text-success mb-2 d-block" id="appliedCouponText"></small>
                    <button type="button" class="btn btn-danger btn-sm w-100" id="removeCouponBtn"
                      onclick="removeCoupon()">
                      <i class="fas fa-times-circle"></i> Remove Coupon
                    </button>
                  </div>

                  <p id="couponMessage" style="color: red;margin-left: 76px;margin-top: 12px;"></p>
                </ul>
              </div>


              <!-- Payment Method -->
              <div class="p-3 border rounded bg-white mb-4">
                <h6 class="mb-4"><i class="fas fa-credit-card me-2"></i>Payment Method</h6>
                <div class="form-check mb-2">
                  <input class="form-check-input" type="radio" name="payment_method" id="cod" value="cod" checked>
                  <label class="form-check-label" for="cod">
                    <i class="fas fa-money-bill me-2"></i>Cash on Delivery
                    <span class="badge bg-success ms-2">No charges</span>
                  </label>
                  <div id="codRestrictionMessage" class="text-danger small mt-1 ms-4" style="display: none;">
                    <i class="fas fa-exclamation-triangle me-1"></i>
                    <span>COD is not available for orders above ₹1000. Please choose online payment or wallet.</span>
                  </div>
                </div>
                <div class="form-check mb-2">
                  <input class="form-check-input" type="radio" name="payment_method" id="razorpay" value="razorpay">
                  <label class="form-check-label" for="razorpay">
                    <i class="fas fa-mobile-alt me-2"></i>Razorpay
                  </label>
                </div>

                {{!-- ✅ WALLET PAYMENT OPTION --}}
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="payment_method" id="wallet" value="wallet">
                  <label class="form-check-label" for="wallet">
                    <i class="fas fa-wallet me-2"></i>Pay with Wallet
                    <span class="badge bg-primary ms-2">
                      Balance: ₹{{user.walletBalance}}
                    </span>
                  </label>
                  <div id="walletBalanceCheck" class="text-danger small mt-1 ms-4" style="display: none;">
                    <i class="fas fa-exclamation-triangle me-1"></i>
                    <span id="walletErrorMessage"></span>
                  </div>
                </div>
              </div>

              <!-- Place Order Button -->
              <button id="placeOrderBtn" type="submit" class="site-btn w-100 mt-4">
                <i class="fas fa-check-circle me-2"></i>PLACE ORDER
              </button>

            </div>
          </div>
        </div>
      </form>
    </div>
  </div>
</section>






<!-- Edit Address Modal -->
<div id="editAddressModal" class="modal">
  <div class="modal-content">
    <span class="close-btn" onclick="closeModal()">&times;</span>
    <h2 class="modal-title">Edit Address</h2>
    <form action="/editCheckoutAddress" method="POST">
      <div class="form-group">
        <label for="addressType">Address Type</label>
        <input type="text" id="edit_addressType" name="addressType" placeholder="Address Type (e.g., Home, Office)"
          required>


        <label for="name">Place Name</label>
        <input type="text" id="edit_name" name="name" placeholder="Full Name" required>

        <label for="city">City</label>
        <input type="text" id="edit_city" name="city" placeholder="City" required>

        <label for="state">State</label>
        <input type="text" id="edit_state" name="state" placeholder="State" required>

        <label for="landMark">Landmark</label>
        <input type="text" id="edit_landMark" name="landMark" placeholder="Landmark" required>

        <label for="pincode">Pincode</label>
        <input type="text" id="edit_pincode" name="pincode" placeholder="Pincode" required>

        <label for="phone">Phone Number</label>
        <input type="tel" id="edit_phone" name="phone" placeholder="Phone Number" required>

        <label for="altPhone">Alternative Phone Number (Optional)</label>
        <input type="tel" id="edit_altPhone" name="altPhone" placeholder="Alternative Phone Number (Optional)">
      </div>

      <input type="hidden" id="edit_address_id" name="address_id">

      <button type="submit" class="save-btn">Save Changes</button>
    </form>
  </div>
</div>


<div id="addAddressModal" class="modal">
  <div class="modal-content p-4">
    <span class="close-btn" onclick="closeModal()">&times;</span>
    <h2 class="modal-title mb-3">Add Address</h2>

    <form id="addressForm" action="/addCheckoutAddress" method="POST" novalidate>
      <div class="mb-3">
        <label for="addressType">Address Type</label>
        <input type="text" name="addressType" id="addressType" class="form-control" required>
        <div class="invalid-feedback">Please enter address type.</div>
      </div>

      <div class="mb-3">
        <label for="name">Place Name</label>
        <input type="text" name="name" id="name" class="form-control" required>
        <div class="invalid-feedback">Please enter place name.</div>
      </div>

      <div class="mb-3">
        <label for="city" >City</label>
        <input type="text" name="city" id="city" class="form-control" required>
        <div class="invalid-feedback">Please enter city.</div>
      </div>

      <div class="mb-3">
        <label for="state">State</label>
        <input type="text" name="state" id="state" class="form-control" required>
        <div class="invalid-feedback">Please enter state.</div>
      </div>

      <div class="mb-3">
        <label for="landMark">Landmark</label>
        <input type="text" name="landMark" id="landMark" class="form-control" required>
        <div class="invalid-feedback">Please enter landmark.</div>
      </div>

      <div class="mb-3">
        <label for="pincode">Pincode</label>
        <input type="text" name="pincode" id="pincode" class="form-control" required pattern="^[1-9][0-9]{5}$">
        <div class="invalid-feedback">Enter a valid 6-digit pincode.</div>
      </div>

      <div class="mb-3">
         <label for="phone">Phone Number</label>
        <input type="tel" name="phone" id="phone" class="form-control" required pattern="^[6-9]\d{9}$">
        <div class="invalid-feedback">Enter a valid 10-digit mobile number.</div>
      </div>

      <div class="mb-4">
        <label for="altPhone">Alternative Phone Number (Optional)</label>
        <input type="tel" name="altPhone" id="altPhone" class="form-control" pattern="^[6-9]\d{9}$">
        <div class="invalid-feedback">Enter a valid 10-digit alternative number.</div>
      </div>

      <button type="submit" class="save-btn">Save Changes</button>
    </form>
  </div>
</div>



<script id="cartItemsJSON" type="application/json">

  {{{cartItemsJSON}}}

</script>
<script>

  const sanitizeQuotes = (string) => {
    if (typeof string !== 'string') return string;
    return string.replace(/'/g, '"');
  }

  const userAddress = {{{ json userAddress }}}; // `json` is a custom helper to inject raw JSON safely

  function openEditAddressModal(addressId) {
    const address = userAddress.find(addr => addr._id === addressId);

    if (address) {
      document.getElementById("edit_addressType").value = address.addressType || '';
      document.getElementById("edit_name").value = address.name || '';
      document.getElementById("edit_city").value = address.city || '';
      document.getElementById("edit_state").value = address.state || '';
      document.getElementById("edit_landMark").value = address.landMark || '';
      document.getElementById("edit_pincode").value = address.pincode || '';
      document.getElementById("edit_phone").value = address.phone || '';
      document.getElementById("edit_altPhone").value = address.altPhone || '';
      document.getElementById("edit_address_id").value = address._id;
      document.getElementById("editAddressModal").style.display = "flex";
      document.body.style.overflow = 'hidden';
    }
  }

  function openAddAddressModal(event) {

    if (event) {
      event.preventDefault();
    }
    const modal = document.getElementById("addAddressModal");
    if (modal) {
      modal.style.display = "flex";
      document.body.style.overflow = 'hidden';
    }
  }

  function closeModal() {

    const editModal = document.getElementById("editAddressModal");
    const addModal = document.getElementById("addAddressModal");

    if (editModal) editModal.style.display = "none";
    if (addModal) addModal.style.display = "none";

    document.body.style.overflow = '';
  }

  // Close modals when clicking outside
  window.onclick = function (event) {
    const editModal = document.getElementById("editAddressModal");
    const addModal = document.getElementById("addAddressModal");

    if (event.target === editModal || event.target === addModal) {
      closeModal();
    }
  };


  document.addEventListener("DOMContentLoaded", function () {
    const placeOrderBtn = document.getElementById("placeOrderBtn");
    if (placeOrderBtn) {
      placeOrderBtn.addEventListener("click", async function (e) {
        e.preventDefault();
        // alert("button clicked");
        await placeOrder();
      });
    }
  });


  async function placeOrder() {
    try {
      const shippingAddressElement = document.querySelector('input[name="shipping_address"]:checked');

      if (!shippingAddressElement) {
        Swal.fire({
          title: 'Error',
          text: 'Please add a shipping address.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        return;
      }

      const shippingAddress = shippingAddressElement.value;
      console.log("🚚 shipping:", shippingAddress);

      const paymentMethod = document.querySelector('input[name="payment_method"]:checked').value;
      console.log("💳 paymentMethod:", paymentMethod);

      const orderedItems = JSON.parse(document.getElementById("cartItemsJSON").textContent);

      console.log("🛒 orderedItems:", orderedItems);

      const totalElem = document.getElementById("total");

      if (!totalElem) {
        console.error("❌ total element not found");
        return;
      }

      console.log("✅ totalElem.innerText =", totalElem.innerText);

      const cleanedText = totalElem.innerText.replace(/[₹,]/g, "").trim();
      console.log("✅ cleanedText =", cleanedText);

      const totalAmount = parseFloat(cleanedText);

      if (isNaN(totalAmount)) {
        console.error("❌ totalAmount is NaN. Raw value:", cleanedText);
        return;
      }

      console.log("✅ Final totalAmount:", totalAmount);

      const couponCode = document.getElementById("couponCode").value.trim();
      const discountText = document.getElementById("discount").innerText.replace("₹", "").replace("-", "").trim();
      const discountAmount = parseFloat(discountText) || 0;
      const appliedCouponCode = currentCouponCode;


      if (!shippingAddress) {
        Swal.fire({
          title: 'Error',
          text: 'Please select a shipping address.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
        return;
      }

      if (totalAmount <= 0) {
        Swal.fire({
          title: 'Error',
          text: 'Your cart is empty or contains invalid items.',
          icon: 'error',
          confirmButtonText: 'GO TO CART'
        }).then(() => {
          window.location.replace("/cart");
        });
        return;
      }

      if (orderedItems.includes(undefined)) {
        Swal.fire({
          title: 'Error',
          text: 'Please remove all undefined items from your cart before proceeding.',
          icon: 'error',
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.replace("/cart");
        });
        return;
      }

      const confirmResult = await Swal.fire({
        title: 'Confirm Order',
        text: 'Are you sure you want to place this order?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, place order!',
        cancelButtonText: 'No, cancel'
      });

      if (!confirmResult.isConfirmed) return;

      Swal.fire({
        title: 'Processing',
        text: 'Please wait while we process your order...',
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false,
        didOpen: () => Swal.showLoading()
      });



      if (paymentMethod === "cod") {
        const response = await fetch("/checkout", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            shippingAddress,
            paymentMethod,
            totalAmount,
            orderedItems,

            couponCode: appliedCouponCode,
            discountAmount


          })
        });

        const data = await response.json();
        if (data.success) {
          await Swal.fire({
            title: 'Success!',
            text: 'Your order has been placed successfully!',
            icon: 'success',
            timer: 1500,
            showConfirmButton: false
          });

          window.location.href = `/viewOrder/${data._id}`;

        } else {
          if (data.unavailableItems && data.unavailableItems.length > 0) {
            let unavailableMessage = 'The Some items are no longer available:<br><ul>';
            // data.unavailableItems.forEach(item => {
            //     unavailableMessage += `<li>${item.name}: ${item.reason}</li>`;
            // });
            // unavailableMessage += '</ul>';

            Swal.fire({
              title: 'Products Unavailable',
              html: unavailableMessage,
              icon: 'error',
              confirmButtonText: 'UPDATE CART'
            }).then(() => {
              window.location.replace("/cart");
            });
          } else {
            Swal.fire({
              title: 'Error!',
              text: data.error || 'Failed to place order',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        }
      }
      else if (paymentMethod === "wallet") {
        // ✅ WALLET PAYMENT PROCESSING
        const response = await fetch("/checkout", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            shippingAddress,
            paymentMethod,
            totalAmount,
            orderedItems,
            couponCode: appliedCouponCode,
            discountAmount
          })
        });

        const data = await response.json();

        if (data.success) {
          await Swal.fire({
            title: 'Payment Successful!',
            text: 'Your order has been placed successfully using wallet payment!',
            icon: 'success',
            timer: 1500,
            showConfirmButton: false
          });
          window.location.href = `/viewOrder/${data.orderId}`;
        } else {
          if (data.unavailableItems && data.unavailableItems.length > 0) {
            let unavailableMessage = 'Some items became unavailable:<br><ul>';
            data.unavailableItems.forEach(item => {
              unavailableMessage += `<li>${item.name}: ${item.reason}</li>`;
            });
            unavailableMessage += '</ul><br>Please try again.';

            Swal.fire({
              title: 'Items Unavailable',
              html: unavailableMessage,
              icon: 'warning',
              confirmButtonText: 'OK'
            });
          } else {
            Swal.fire({
              title: 'Payment Failed!',
              text: data.message || 'Wallet payment failed. Please try again.',
              icon: 'error',
              confirmButtonText: 'OK'
            });
          }
        }
      }
      else if (paymentMethod === "razorpay") {


        const validateResponse = await fetch("/validateCheckoutItems", {
          method: "POST",
          headers: { "content-type": "application/json" },
          body: JSON.stringify({
            orderedItems
          })

        });
        const validateData = await validateResponse.json();


        if (!validateData.success) {

          if (validateData.unavailableItems && validateData.unavailableItems.length > 0) {
            let unavailableMessage = 'The some items are no longer available:<br><ul>';

            Swal.fire({
              title: 'Products Unavailable',
              html: unavailableMessage,
              icon: 'error',
              confirmButtonText: 'UPDATE CART'
            }).then(() => {
              window.location.replace("/cart");
            });
            return;
          }
        }
        const orderResponse = await fetch("/createOrder", {
          method: "POST",
          headers: { "content-type": "application/json" },
          body: JSON.stringify({
            amount: totalAmount,
            currency: "INR"
          })
        });
        const orderData = await orderResponse.json();

        console.log("orderData : ", orderData)
        if (!orderData.success) {
          throw new Error("Failed to create Razorpay order");
        }

        const options = {

          key: orderData.key,
          amount: orderData.amount,
          currency: orderData.currency,
          name: "Take Your Time",
          description: "Watch Purchase",
          order_id: orderData.order_id,
          handler: async function (response) {
            try {
              const verifyResponse = await fetch("/verifyPayment", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  razorpay_payment_id: response.razorpay_payment_id,
                  razorpay_order_id: response.razorpay_order_id,
                  razorpay_signature: response.razorpay_signature,
                  shippingAddress,
                  orderedItems,
                  totalAmount,
                  couponCode: appliedCouponCode,
                  discountAmount,
                  paymentMethod: "razorpay"
                })
              });

              const verifyData = await verifyResponse.json();

              if (verifyData.success) {
                await Swal.fire({
                  title: 'Payment Successful!',
                  text: 'Your order has been placed successfully!',
                  icon: 'success',
                  timer: 1500,
                  showConfirmButton: false
                });

                window.location.href = `/viewOrder/${verifyData.orderId}`;
              } else {


                if (verifyData.unavailableItems && verifyData.unavailableItems.length > 0) {
                  let unavailableMessage = 'Payment successful but some items became unavailable:<br><ul>';
                  verifyData.unavailableItems.forEach(item => {
                    unavailableMessage += `<li>${item.name}: ${item.reason}</li>`;
                  });
                  unavailableMessage += '</ul><br>Your payment will be refunded.';

                  Swal.fire({
                    title: 'Products Unavailable',
                    html: unavailableMessage,
                    icon: 'warning',
                    confirmButtonText: 'OK'
                  }).then(() => {
                    window.location.replace("/cart");
                  });
                  return;
                }

                throw new Error(verifyData.message || 'Payment verification failed');




              }
            } catch (error) {
              console.error("Payment verification error:", error);
              Swal.fire({
                title: 'Payment Failed!',
                text: error.message || 'Payment verification failed. Please contact support.',
                icon: 'error'
              });
              const failedResponse = await fetch("/verifyPayment", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  razorpay_order_id: orderData.order_id,
                  shippingAddress,
                  orderedItems,
                  totalAmount,
                  couponCode: appliedCouponCode,
                   discountAmount,
                  paymentMethod: "razorpay",

                })
              });
              const failedData = await failedResponse.json();
              console.log("failedData : ", failedData)
              if (failedData.orderId) {
                window.location.href = `/paymentFailed/${failedData.orderId}`;
              }

            }
          },

          modal: {
            ondismiss: async function () {
              try {

                const response = await fetch("/verifyPayment", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    razorpay_order_id: orderData.order_id,
                    shippingAddress,
                    orderedItems,
                    totalAmount,
                    couponCode: appliedCouponCode,
                    discountAmount,
                    paymentMethod: "razorpay",
                    // paymentStatus: "failed"
                  })
                });
                const failedResponse = await response.json();
                if (failedResponse.orderId) {
                  await Swal.fire({
                    title: 'Payment Cancelled',
                    text: 'Your payment was cancelled',
                    icon: 'warning',
                    timer: 1500,
                    showConfirmButton: false
                  });
                  window.location.href = `/paymentFailed/${failedResponse.orderId}`;
                }
              } catch (error) {
                if (failedResponse.orderId) {
                  await Swal.fire({
                    title: 'Payment Cancelled',
                    text: 'Your payment was cancelled',
                    icon: 'warning',
                    timer: 1500,
                    showConfirmButton: false
                  });
                  window.location.href = `/paymentFailed/${failedResponse.orderId}`;
                }
                console.error("Failed to handle payment cancellation:", error);
                Swal.fire({
                  title: 'Error',
                  text: 'Something went wrong while cancelling the payment',
                  icon: 'error',
                  confirmButtonText: 'OK'
                });
              }
            }
          },

          prefill: {
            name: "{{user.name}}",
            email: "{{user.email}}",
            contact: "{{user.phone}}"
          },

          theme: {
            color: "#3399cc"
          },

        };

        const razorpay = new Razorpay(options);
        razorpay.open();


      }
      // 👉 Continue with placing order logic or API call...

    } catch (error) {
      console.error("🔥 Error placing order:", error);
      await Swal.fire({
        title: 'Error!',
        text: error.message || 'Something went wrong while placing your order.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  }


  let currentCouponCode = '';

  // ✅ COD RESTRICTION VALIDATION
  function checkCODEligibility() {
    // Get current total from the page (after coupons)
    const totalElement = document.getElementById('total');
    const totalText = totalElement ? totalElement.innerText.replace('₹', '').trim() : '{{cart.cartTotal}}';
    const currentTotal = parseFloat(totalText) || {{cart.cartTotal}};

    const codRadio = document.getElementById('cod');
    const codLabel = document.querySelector('label[for="cod"]');
    const codError = document.getElementById('codRestrictionMessage');

    if (currentTotal > 1000) {
      codRadio.disabled = true;
      codLabel.style.color = '#999';
      codError.style.display = 'block';

      // If COD is currently selected, switch to Razorpay
      if (codRadio.checked) {
        document.getElementById('razorpay').checked = true;
      }
    } else {
      codRadio.disabled = false;
      codLabel.style.color = '';
      codError.style.display = 'none';
    }
  }

  // ✅ WALLET BALANCE VALIDATION
  function checkWalletBalance() {
    const walletBalance = {{user.walletBalance}};

    // Get current total from the page (after coupons)
    const totalElement = document.getElementById('total');
    const totalText = totalElement ? totalElement.innerText.replace('₹', '').trim() : '{{cart.cartTotal}}';
    const currentTotal = parseFloat(totalText) || {{cart.cartTotal}};

    const walletRadio = document.getElementById('wallet');
    const walletLabel = document.querySelector('label[for="wallet"]');
    const walletError = document.getElementById('walletBalanceCheck');
    const walletErrorMessage = document.getElementById('walletErrorMessage');

    if (walletBalance < currentTotal) {
      walletRadio.disabled = true;
      walletLabel.style.color = '#999';
      walletError.style.display = 'block';
      walletErrorMessage.textContent = `Insufficient wallet balance. Need ₹${currentTotal - walletBalance} more.`;

      // If wallet is currently selected, switch to available option
      if (walletRadio.checked) {
        const codRadio = document.getElementById('cod');
        if (!codRadio.disabled) {
          codRadio.checked = true;
        } else {
          document.getElementById('razorpay').checked = true;
        }
      }
    } else {
      walletRadio.disabled = false;
      walletLabel.style.color = '';
      walletError.style.display = 'none';
    }
  }

  // ✅ CHECK ALL PAYMENT METHOD ELIGIBILITY
  function checkPaymentMethodEligibility() {
    checkCODEligibility();
    checkWalletBalance();
  }

  // Check payment method eligibility on page load
  document.addEventListener('DOMContentLoaded', function() {
    checkPaymentMethodEligibility();
  });

  async function applyCoupons() {

    const couponInputElement = document.getElementById("couponCode");
    const couponCode = couponInputElement.value.trim();

    const subtotalText = document.getElementById("subtotal").innerText.replace("₹", "").trim();
    const subtotal = parseFloat(subtotalText);

    if (!couponCode) {
      document.getElementById("couponMessage").style.color = "red";
      document.getElementById("couponMessage").innerText = "Please enter a coupon code!";
      return;
    }

    try {
      const response = await fetch("/applyCoupon", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          couponCode,
          subtotal
        })
      });

      const data = await response.json();

      if (data.success) {
        // Update UI for applied coupon
        document.getElementById("discount").innerText = `₹${data.discount}`;
        document.getElementById("total").innerText = `₹${data.newTotal + 40}`;
        document.getElementById("couponMessage").style.color = "green";
        document.getElementById("couponMessage").innerText = "Coupon applied successfully!";

        // Show remove coupon section
        document.getElementById("removeCouponSection").style.display = "block";
        document.getElementById("appliedCouponText").innerText = `Applied Coupon: ${couponCode}`;
        currentCouponCode = couponCode;

        // Clear input
        couponInputElement.value = '';

        // ✅ RECHECK PAYMENT METHOD ELIGIBILITY AFTER COUPON APPLIED
        checkPaymentMethodEligibility();

        Swal.fire({
          title: 'Success!',
          text: 'Coupon applied successfully!',
          icon: 'success',
          showConfirmButton: false,
          timer: 1500
        });
      } else {
        document.getElementById("couponMessage").style.color = "red";
        document.getElementById("couponMessage").innerText = data.message;
      }
    } catch (error) {
      console.error("Error applying coupon:", error);
      document.getElementById("couponMessage").style.color = "red";
      document.getElementById("couponMessage").innerText = "An error occurred. Please try again.";
    }

  }

  async function removeCoupon() {
    try {

      const subtotalText = document.getElementById("subtotal").innerText.replace("₹", "").trim();
      const subtotal = parseFloat(subtotalText);


      const response = await fetch("/removeCoupon", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          couponCode: currentCouponCode,
          subtotal
        })
      });
      const data = await response.json();

      if (data.success) {
        // Reset UI
        document.getElementById("discount").innerText = "₹0";
        document.getElementById("total").innerText = `₹${data.cartTotal}`;
        document.getElementById("couponMessage").innerText = "";
        document.getElementById("removeCouponSection").style.display = "none";
        currentCouponCode = '';

        // ✅ RECHECK PAYMENT METHOD ELIGIBILITY AFTER COUPON REMOVED
        checkPaymentMethodEligibility();

        Swal.fire({
          title: 'Coupon Removed',
          text: 'Coupon has been successfully removed',
          icon: 'info',
          showConfirmButton: false,
          timer: 1500
        });
      }

    } catch (error) {

      console.error("Error removing coupon:", error);
      document.getElementById("couponMessage").style.color = "red";
      document.getElementById("couponMessage").innerText = "Error removing coupon. Please try again.";

    }
  }


  // Add event listeners when document loads
  document.addEventListener('DOMContentLoaded', function () {
    const applyCouponBtn = document.getElementById("applyCoupon");
    const removeCouponBtn = document.getElementById("removeCouponBtn");

    if (applyCouponBtn) {
      applyCouponBtn.addEventListener('click', applyCoupons);
    }

    if (removeCouponBtn) {
      removeCouponBtn.addEventListener('click', removeCoupon);
    }
  });


  function copyCoupon(couponId) {

    var couponCodeElement = document.querySelector(`[data-coupon-id="${couponId}"]`);

    if (couponCodeElement) {
      var couponText = couponCodeElement.textContent.trim();

      navigator.clipboard.writeText(couponText).then(() => {
        var message = document.getElementById("copy-message-" + couponId);
        if (message) {
          message.style.display = "inline";
          setTimeout(() => {
            message.style.display = "none";
          }, 2000);
        }


      }).catch(err => {
        console.error('Failed to copy: ', err);
      });
    } else {
      console.error('Coupon code element not found');
    }
  }




   document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('addressForm');

    form.addEventListener('submit', function (event) {
      event.preventDefault(); // Prevent default initially
      let isValid = true;

      // Reset all previous invalid styles
      const inputs = form.querySelectorAll('input');
      inputs.forEach(input => input.classList.remove('is-invalid'));

      // Validate required fields
      form.querySelectorAll('input[required]').forEach(input => {
        if (!input.value.trim()) {
          input.classList.add('is-invalid');
          isValid = false;
        }
      });

      // Validate specific patterns
      const phoneRegex = /^[6-9]\d{9}$/;
      const pinRegex = /^[1-9][0-9]{5}$/;

      const phone = form.phone.value.trim();
      const altPhone = form.altPhone.value.trim();
      const pincode = form.pincode.value.trim();

      if (!phoneRegex.test(phone)) {
        form.phone.classList.add('is-invalid');
        isValid = false;
      }

      if (altPhone && !phoneRegex.test(altPhone)) {
        form.altPhone.classList.add('is-invalid');
        isValid = false;
      }

      if (!pinRegex.test(pincode)) {
        form.pincode.classList.add('is-invalid');
        isValid = false;
      }

      if (isValid) {
        form.submit(); // All validation passed → submit form
      }
    });
  });







</script>



